package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"fmt"

	"github.com/mariasalcedo/go-graphql-example/graph/model"
)

// ID is the resolver for the id field.
func (r *queryResolver) ID(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// WeatherForecasts is the resolver for the weatherForecasts field.
func (r *windFarmResolver) WeatherForecasts(ctx context.Context, obj *model.WindFarm, forecastDays *int) ([]*model.WeatherForecast, error) {
	panic(fmt.Errorf("not implemented: WeatherForecasts - weatherForecasts"))
}

// HasPrecipitationToday is the resolver for the hasPrecipitationToday field.
func (r *windFarmResolver) HasPrecipitationToday(ctx context.Context, obj *model.WindFarm) (bool, error) {
	panic(fmt.Errorf("not implemented: HasPrecipitationToday - hasPrecipitationToday"))
}

// Elevation is the resolver for the elevation field.
func (r *windFarmResolver) Elevation(ctx context.Context, obj *model.WindFarm) (float64, error) {
	panic(fmt.Errorf("not implemented: Elevation - elevation"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// WindFarm returns WindFarmResolver implementation.
func (r *Resolver) WindFarm() WindFarmResolver { return &windFarmResolver{r} }

type queryResolver struct{ *Resolver }
type windFarmResolver struct{ *Resolver }
